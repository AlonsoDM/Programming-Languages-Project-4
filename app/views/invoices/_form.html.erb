<%= form_with model: invoice, local: true do |form| %>
  <% if invoice.errors.any? %>
    <div class="alert alert-danger">
      <h4><%= pluralize(invoice.errors.count, "error") %> prohibited this invoice from being saved:</h4>
      <ul class="mb-0">
        <% invoice.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="row">
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :client_id, "Client", class: "form-label" %>
        <%= form.select :client_id, options_from_collection_for_select(@clients, :id, :display_name, invoice.client_id),
                      { prompt: 'Select a client' }, { class: "form-select" } %>
      </div>
    </div>

    <div class="col-md-3">
      <div class="mb-3">
        <%= form.label :invoice_date, "Invoice Date", class: "form-label" %>
        <%= form.date_field :invoice_date, class: "form-control" %>
      </div>
    </div>

    <div class="col-md-3">
      <div class="mb-3">
        <%= form.label :due_date, "Due Date", class: "form-label" %>
        <%= form.date_field :due_date, class: "form-control" %>
      </div>
    </div>
  </div>

  <div class="mb-3">
    <%= form.label :notes, class: "form-label" %>
    <%= form.text_area :notes, class: "form-control", rows: 3 %>
  </div>

  <!-- Invoice Items -->
  <div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Invoice Items</h5>
      <button type="button" class="btn btn-sm btn-success" id="add-item">
        <i class="bi bi-plus"></i> Add Item
      </button>
    </div>
    <div class="card-body">
      <div id="invoice-items">
        <%= form.fields_for :invoice_items do |item_form| %>
          <%= render 'invoice_item_fields', f: item_form %>
        <% end %>
      </div>

      <!-- Totals -->
      <div class="row mt-3">
        <div class="col-md-8"></div>
        <div class="col-md-4">
          <table class="table table-sm">
            <tr>
              <td><strong>Subtotal:</strong></td>
              <td class="text-end" id="invoice-subtotal">$0.00</td>
            </tr>
            <tr>
              <td><strong>Tax:</strong></td>
              <td class="text-end" id="invoice-tax">$0.00</td>
            </tr>
            <tr class="table-primary">
              <td><strong>Total:</strong></td>
              <td class="text-end" id="invoice-total">$0.00</td>
            </tr>
          </table>
        </div>
      </div>
    </div>
  </div>

  <div class="mb-3">
    <%= form.submit class: "btn btn-primary" %>
    <%= link_to "Cancel", invoices_path, class: "btn btn-secondary" %>
  </div>
<% end %>

<!-- Invoice Item Fields Template -->
<template id="invoice-item-template">
  <div class="invoice-item border p-3 mb-3">
    <div class="row">
      <div class="col-md-5">
        <label class="form-label">Product</label>
        <select name="invoice[invoice_items_attributes][INDEX][product_id]" class="form-select product-select">
          <option value="">Select a product</option>
          <% @products.each do |product| %>
            <% if product.active? %>
              <option value="<%= product.id %>"
                      data-price="<%= product.price %>"
                      data-tax-rate="<%= product.tax_rate.rate %>"
                      data-stock="<%= product.stock_quantity %>">
                <%= product.name %> - $<%= sprintf('%.2f', product.price) %> (Stock: <%= product.stock_quantity %>)
              </option>
            <% end %>
          <% end %>
        </select>
      </div>

      <div class="col-md-2">
        <label class="form-label">Quantity</label>
        <input type="number" name="invoice[invoice_items_attributes][INDEX][quantity]"
               class="form-control quantity-input" min="1" value="1">
      </div>

      <div class="col-md-2">
        <label class="form-label">Unit Price</label>
        <input type="hidden" name="invoice[invoice_items_attributes][INDEX][unit_price]"
               class="unit-price-input">
        <div class="form-control-plaintext unit-price-display">$0.00</div>
        <small class="text-muted">Auto-filled from product</small>
      </div>

      <div class="col-md-2">
        <label class="form-label">Tax Rate (%)</label>
        <input type="hidden" name="invoice[invoice_items_attributes][INDEX][tax_rate]"
               class="tax-rate-input">
        <div class="form-control-plaintext tax-rate-display">0%</div>
        <small class="text-muted">Auto-filled from product</small>
      </div>

      <div class="col-md-1">
        <label class="form-label">&nbsp;</label>
        <button type="button" class="btn btn-danger btn-sm d-block remove-item">
          <i class="bi bi-trash"></i>
        </button>
      </div>
    </div>

    <div class="row mt-2">
      <div class="col-md-8"></div>
      <div class="col-md-4">
        <div class="text-end">
          <strong>Line Total: <span class="item-total">$0.00</span></strong>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let itemIndex = <%= invoice.invoice_items.length %>;

  // Add new item
  document.getElementById('add-item').addEventListener('click', function() {
    const template = document.getElementById('invoice-item-template');
    const clone = template.content.cloneNode(true);

    // Replace INDEX with actual index
    const html = clone.querySelector('.invoice-item').outerHTML.replace(/INDEX/g, itemIndex);

    const wrapper = document.createElement('div');
    wrapper.innerHTML = html;

    document.getElementById('invoice-items').appendChild(wrapper.firstChild);
    itemIndex++;

    updateCalculations();
  });

  // Remove item (using event delegation)
  document.addEventListener('click', function(e) {
    if (e.target.closest('.remove-item')) {
      e.preventDefault();
      const item = e.target.closest('.invoice-item');
      const destroyField = item.querySelector('input[name*="_destroy"]');

      if (destroyField) {
        // For existing items, mark for destruction
        destroyField.value = '1';
        item.style.display = 'none';
      } else {
        // For new items, remove completely
        item.remove();
      }

      updateCalculations();
    }
  });

  // Product selection (using event delegation)
  document.addEventListener('change', function(e) {
    if (e.target.classList.contains('product-select')) {
      const option = e.target.selectedOptions[0];
      const item = e.target.closest('.invoice-item');

      if (option.value) {
        const unitPriceInput = item.querySelector('.unit-price-input');
        const unitPriceDisplay = item.querySelector('.unit-price-display');
        const taxRateInput = item.querySelector('.tax-rate-input');
        const taxRateDisplay = item.querySelector('.tax-rate-display');

        // Set hidden input values and display values
        unitPriceInput.value = option.dataset.price;
        unitPriceDisplay.textContent = '$' + parseFloat(option.dataset.price).toFixed(2);

        taxRateInput.value = option.dataset.taxRate;
        taxRateDisplay.textContent = option.dataset.taxRate + '%';

        updateItemTotal(item);
      } else {
        // Clear values when no product is selected
        const unitPriceInput = item.querySelector('.unit-price-input');
        const unitPriceDisplay = item.querySelector('.unit-price-display');
        const taxRateInput = item.querySelector('.tax-rate-input');
        const taxRateDisplay = item.querySelector('.tax-rate-display');

        unitPriceInput.value = '';
        unitPriceDisplay.textContent = '$0.00';
        taxRateInput.value = '';
        taxRateDisplay.textContent = '0%';

        updateItemTotal(item);
      }
    }
  });

  // Quantity changes (using event delegation)
  document.addEventListener('input', function(e) {
    if (e.target.classList.contains('quantity-input')) {
      const item = e.target.closest('.invoice-item');
      updateItemTotal(item);
    }
  });

  function updateItemTotal(item) {
    const quantity = parseFloat(item.querySelector('.quantity-input').value) || 0;
    const unitPrice = parseFloat(item.querySelector('.unit-price-input').value) || 0;
    const taxRate = parseFloat(item.querySelector('.tax-rate-input').value) || 0;

    const subtotal = quantity * unitPrice;
    const tax = subtotal * (taxRate / 100);
    const total = subtotal + tax;

    item.querySelector('.item-total').textContent = '$' + total.toFixed(2);

    updateCalculations();
  }

  function updateCalculations() {
    let subtotal = 0;
    let totalTax = 0;

    document.querySelectorAll('.invoice-item:not([style*="display: none"])').forEach(function(item) {
      const quantity = parseFloat(item.querySelector('.quantity-input').value) || 0;
      const unitPrice = parseFloat(item.querySelector('.unit-price-input').value) || 0;
      const taxRate = parseFloat(item.querySelector('.tax-rate-input').value) || 0;

      const itemSubtotal = quantity * unitPrice;
      const itemTax = itemSubtotal * (taxRate / 100);

      subtotal += itemSubtotal;
      totalTax += itemTax;
    });

    const total = subtotal + totalTax;

    document.getElementById('invoice-subtotal').textContent = '$' + subtotal.toFixed(2);
    document.getElementById('invoice-tax').textContent = '$' + totalTax.toFixed(2);
    document.getElementById('invoice-total').textContent = '$' + total.toFixed(2);
  }

  // Initial calculation
  updateCalculations();
});
</script>
